from dotenv import load_dotenv
import os
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
import json
import shutil
import cogs.STT
import time
from datetime import datetime
from openai import OpenAI
from collections import defaultdict, deque

load_dotenv()
TOKEN = os.environ.get("TG_TOKEN")
client = OpenAI(api_key=os.environ.get("CHATGPT"))

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö) –∏ –ø—Ä–µ—Å–µ—Ç–æ–≤
user_history = defaultdict(lambda: deque(maxlen=10))
# –ï—Å–ª–∏ —é–∑–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–ª –ø—Ä–µ—Å–µ—Ç, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–µ—Å–µ—Ç "–£—á–∏—Ç–µ–ª—å" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
user_presets = defaultdict(
    lambda: "–¢—ã –∫—Ä—É—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—á–∏—Ç–µ–ª—å –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤ –º–∏—Ä–∞, "
              "–∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Å—Ç–∏–ª–µ Gen-Z, –æ–±—â–∞–π—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–∞–∫ –ø–æ–¥—Ä–æ—Å—Ç–æ–∫ "
              "–∏ –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–∏–º–µ—Ä—ã –∫ –æ—Ç–≤–µ—Ç—É, —á—Ç–æ–±—ã –¥–∞—Ç—å —Ç–æ—á–Ω—ã–π –∏ —Ö–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç."
)


def resolve_context(user_id, text):
    """
    –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Ñ—Ä–∞–∑–∞ '—ç—Ç–æ –∂–µ', –∑–∞–º–µ–Ω—è–µ–º –µ—ë –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if "—ç—Ç–æ –∂–µ" in text.lower():
        history = user_history[user_id]
        if history:
            last_query = history[-1]
            return text.replace("—ç—Ç–æ –∂–µ", last_query)
    return text


class StartTelegram:
    def __init__(self) -> None:
        pass

    def runbot():

        def makeDir():
            voice_dir = os.path.join(os.getcwd(), "voice")
            os.makedirs(voice_dir, exist_ok=True)

        def removeDir():
            voice_dir = os.path.join(os.getcwd(), "voice")
            shutil.rmtree(voice_dir, ignore_errors=True)

        application = Application.builder().token(TOKEN).build()

        async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
            await update.message.reply_text(
                "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ Simble, –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å üòâ\n"
                "–î–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /setpreset"
            )

        async def set_preset(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ—Å–µ—Ç–∞. –í—ã–≤–æ–¥–∏—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏."""
            keyboard = [
                [InlineKeyboardButton("–£—á–∏—Ç–µ–ª—å", callback_data="preset_teacher")],
                [InlineKeyboardButton("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", callback_data="preset_assistant")],
                [InlineKeyboardButton("–Æ–º–æ—Ä", callback_data="preset_comedy")],
                [InlineKeyboardButton("–ê–ª—å—Ç", callback_data="preset_alt")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏, –∫–∞–∫ —Ç–µ–±–µ –æ—Ç–≤–µ—á–∞—Ç—å:", reply_markup=reply_markup)

        async def preset_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ—Å–µ—Ç–∞ —á–µ—Ä–µ–∑ callback-–∑–∞–ø—Ä–æ—Å."""
            query = update.callback_query
            await query.answer()  # —É–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
            data = query.data

            if data == "preset_teacher":
                preset = ("–¢—ã –∫—Ä—É—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—á–∏—Ç–µ–ª—å –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤ –º–∏—Ä–∞, "
                          "–∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Å—Ç–∏–ª–µ Gen-Z, –æ–±—â–∞–π—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–∞–∫ –ø–æ–¥—Ä–æ—Å—Ç–æ–∫ "
                          "–∏ –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–∏–º–µ—Ä—ã –∫ –æ—Ç–≤–µ—Ç—É, —á—Ç–æ–±—ã –¥–∞—Ç—å —Ç–æ—á–Ω—ã–π –∏ —Ö–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç.")
            elif data == "preset_assistant":
                preset = "–¢—ã —É—á–∏—Ç–µ–ª—å, —Å–µ—Ä—å–µ–∑–Ω—ã–π –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—á–µ–Ω–∏–∫–∞, —Ç—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ö–æ—á–µ—à—å –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–∂–µ–≤–∞—Ç—å —Ç–µ–º—É —É—á–µ–Ω–∏–∫—É –∏ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ"
            elif data == "preset_comedy":
                preset = "–¢—ã –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã–π –∏ –æ–æ–æ—á–µ–Ω—å —Å–º–µ—à–Ω–æ–π —É—á–∏—Ç–µ–ª—å , –Ω–æ –æ—á–µ–Ω—å –∫–æ–º–∏—á–Ω—ã–π –∏ –ª—é–±–∏—à—å —à—É—Ç–∏—Ç—å  –∏ –∏–Ω–æ–≥–¥–∞ —Å–º–µ—è—Ç—Å—è, –∏–Ω–æ–≥–¥–∞ —É —Ç–µ–±—è –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å–∞—Ä–∫–∞–∑–º –∏ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è"
            elif data == "preset_alt":
                preset = "–ß–µ–ª–∏–∫, —Ç—ã —Ç–∏–ø–∞ —É—á–∏—Ç–µ–ª—å –Ω–æ –¥—Ä–µ–π–Ω –∏ –∞–ª—å—Ç—É—à–∫–∞, —Ç—ã —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—à—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–∞–∫ –∞–ª—å—Ç—É—à–∫–∞ –∏ –ª—é–±–∏—à—å –≥–æ–≤–æ—Ä–∏—Ç—å: —Ü–µ–ª—É—é —Ç–µ–±—è –∫—Ä–∞—Å–æ—Ç–æ—á–∫–∞"
            else:
                preset = user_presets[query.from_user.id]

            user_presets[query.from_user.id] = preset
            preset_name = data.replace("preset_", "").capitalize()
            await query.edit_message_text(text=f"–í—ã–±—Ä–∞–Ω –ø—Ä–µ—Å–µ—Ç: {preset_name}")

        async def data(update: Update, context: ContextTypes.DEFAULT_TYPE):
            await update.message.reply_text("–î–∞–Ω–Ω—ã–µ —Å–≥—Ä—É–∂–µ–Ω—ã üß†")

        async def voiceHandler(update: Update, context: ContextTypes.DEFAULT_TYPE):
            voice_dir = os.path.join(os.getcwd(), "voice")
            os.makedirs(voice_dir, exist_ok=True)

            new_file = await context.bot.get_file(update.message.voice.file_id)
            voice_files = os.listdir(voice_dir)
            voice_index = len(voice_files)
            voice_filename = f"voice_{voice_index}.ogg"
            voice_path = os.path.join(voice_dir, voice_filename)
            await new_file.download_to_drive(voice_path)
            await update.message.reply_text("üéôÔ∏è Voice note saved!")

            # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ (Whisper)
            original_text = cogs.STT.SpeechToText(voice_filename).transcribe_audio()
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤
            user_history[update.effective_user.id].append(original_text)
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ—Ä–∞–∑–∞ "—ç—Ç–æ –∂–µ", –∑–∞–º–µ–Ω—è–µ–º –µ—ë –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å
            resolved_text = resolve_context(update.effective_user.id, original_text)
            await update.message.reply_text(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {resolved_text}")

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–µ—Å–µ—Ç–æ–º
            def ask_gpt(text):
                system_message = user_presets[update.effective_user.id]
                response = client.chat.completions.create(
                    model="gpt-4o",
                    messages=[
                        {"role": "system", "content": system_message},
                        {"role": "user", "content": text}
                    ]
                )
                return response.choices[0].message.content

            answer = ask_gpt(resolved_text)

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –∞—É–¥–∏–æ (Text-to-Speech, TTS)
            def text_to_speech(text, filename="response.mp3"):
                response = client.audio.speech.create(
                    model="tts-1",
                    voice="nova",  # –î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: alloy, echo, fable, onyx, shimmer
                    input=text
                )
                with open(filename, "wb") as f:
                    f.write(response.content)

            await update.message.reply_text(f"ü§ñ GPT: {answer}")
            audio_path = os.path.join(voice_dir, "response.mp3")
            text_to_speech(answer, audio_path)
            with open(audio_path, "rb") as voice:
                await context.bot.send_voice(chat_id=update.effective_chat.id, voice=voice)
            time.sleep(5)

        async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
            now = datetime.now()
            stop_msg = (
                f"–ë–æ—Ç –≤—ã–∫–ª—é—á–∏–ª—Å—è –≤:\n"
                f"–í—Ä–µ–º—è: {now.hour}:{now.minute}\n"
                f"–î–∞—Ç–∞: {now.day}.{now.month}.{now.year}"
            )
            await update.message.reply_text(stop_msg)
            context.application.stop_running()

        def main():
            makeDir()
            print("üöÄ Started bot...")
            # –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:
            application.add_handler(CommandHandler("start", start))
            application.add_handler(CommandHandler("setpreset", set_preset))
            application.add_handler(CallbackQueryHandler(preset_callback, pattern=r"^preset_"))
            application.add_handler(CommandHandler("data", data))
            application.add_handler(CommandHandler("stop", stop))
            application.add_handler(MessageHandler(filters.VOICE, voiceHandler))
            application.run_polling()
            removeDir()

        main()
